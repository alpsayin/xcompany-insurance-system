/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ClaimHandlerPanel.java
 *
 * Created on 22.Eki.2011, 17:53:29
 */

package xcompany.userInterface;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;
import xcompany.control.DatabaseControl;
import xcompany.lists.ClaimList;
import xcompany.structures.Claim;
import xcompany.structures.User;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import xcompany.control.ClaimControl;
import xcompany.structures.Claim.ClaimStatus;
import xcompany.structures.ClaimHandler;
import xcompany.structures.Customer;
/**
 *
 * @author Mert
 */
public class ClaimHandlerPanel extends javax.swing.JPanel {

    User user = null;
    ClaimControl cc = new ClaimControl();
    
    ClaimList claimListAvailableToHandle;
    ClaimList claimListTaken;
    /** Creates new form ClaimHandlerPanel */
    public ClaimHandlerPanel(User user) throws IOException, ClassNotFoundException {

        this.user = user;

        claimListAvailableToHandle = DatabaseControl.getClaimsByStatus(ClaimStatus.Registered);
        claimListTaken = DatabaseControl.getClaimsOfHandler(user.getName());

        initComponents();

        panelTakenClaims.setLayout(new GridLayout(2,0));

        if(claimListTaken != null){
            JTable table = new JTable(new MyTableModel(claimListTaken)){

                //Implement table cell tool tips.
                @Override
                public String getToolTipText(MouseEvent e) {
                    String tip = null;
                    java.awt.Point p = e.getPoint();
                    int rowIndex = rowAtPoint(p);
                    int colIndex = columnAtPoint(p);
                    int realColumnIndex = convertColumnIndexToModel(colIndex);

                    TableModel model = getModel();
                    if (realColumnIndex == 1) { //customer name
                        int id =Integer.parseInt( (String)model.getValueAt(rowIndex,0));
                        Customer user = claimListTaken.get(id).getOwner();
                        tip = "Insurance Limit: " + user.getInsurance().getMaxAmount() +
                                "$\n Insurance Repair Limit: " + user.getInsurance().getMaxNumRepairs();
                    } else if (realColumnIndex == 2) { //Description

                        String description = (String)model.getValueAt(rowIndex,3);

                        tip = description;

                    } else {
                        //You can omit this part if you know you don't
                        //have any renderers that supply their own tool
                        //tips.
                        tip = super.getToolTipText(e);
                    }
                    return tip;
                }
            };
            table.setPreferredScrollableViewportSize(new Dimension(500, 70));
            table.setFillsViewportHeight(true);

            //Create the scroll pane and add the table to it.
            JScrollPane scrollPane = new JScrollPane(table);

            //Add the scroll pane to this panel.
            panelTakenClaims.add(scrollPane);
            panelTakenClaims.revalidate();
            validate();
        }
    
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableAvailableClaims = new javax.swing.JTable();
        buttonTakeClaim = new javax.swing.JButton();
        panelCurrentClaimDetails = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        panelTakenClaims = new javax.swing.JPanel();

        setMinimumSize(new java.awt.Dimension(600, 450));
        setPreferredSize(new java.awt.Dimension(600, 450));

        tableAvailableClaims.setModel(new MyTableModel(claimListAvailableToHandle));
        tableAvailableClaims.getSelectionModel().addListSelectionListener(new RowListener());
        tableAvailableClaims.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableAvailableClaims);

        buttonTakeClaim.setText("Take Claim");
        buttonTakeClaim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTakeClaimActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelCurrentClaimDetailsLayout = new javax.swing.GroupLayout(panelCurrentClaimDetails);
        panelCurrentClaimDetails.setLayout(panelCurrentClaimDetailsLayout);
        panelCurrentClaimDetailsLayout.setHorizontalGroup(
            panelCurrentClaimDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 575, Short.MAX_VALUE)
        );
        panelCurrentClaimDetailsLayout.setVerticalGroup(
            panelCurrentClaimDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 213, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelCurrentClaimDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)
                    .addComponent(buttonTakeClaim, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonTakeClaim)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelCurrentClaimDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Available Claims", jPanel1);

        javax.swing.GroupLayout panelTakenClaimsLayout = new javax.swing.GroupLayout(panelTakenClaims);
        panelTakenClaims.setLayout(panelTakenClaimsLayout);
        panelTakenClaimsLayout.setHorizontalGroup(
            panelTakenClaimsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 595, Short.MAX_VALUE)
        );
        panelTakenClaimsLayout.setVerticalGroup(
            panelTakenClaimsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 422, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTakenClaims, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTakenClaims, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Taken Claims", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonTakeClaimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTakeClaimActionPerformed
        int row = tableAvailableClaims.getSelectedRow();
        if(row != -1){
            try {
                int id = Integer.parseInt(tableAvailableClaims.getValueAt(row, 0).toString());
                Claim c = claimListAvailableToHandle.get(id);
                boolean result = cc.assignClaimHandler(c, (ClaimHandler)user);

                if (result){
                    System.out.println("Claim is assigned");
                    claimListAvailableToHandle.getClaimList().remove(id);
                    tableAvailableClaims.setModel(new MyTableModel(claimListAvailableToHandle));
                    
                }
            } catch (Exception ex) {
                Logger.getLogger(ClaimHandlerPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            
           
        }
        else{
            
        }
    }//GEN-LAST:event_buttonTakeClaimActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonTakeClaim;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel panelCurrentClaimDetails;
    private javax.swing.JPanel panelTakenClaims;
    private javax.swing.JTable tableAvailableClaims;
    // End of variables declaration//GEN-END:variables


    private Claim getClaimAtSelectedRow(ClaimList c, JTable jt){
        int row = jt.getSelectedRow();
        if (row<0){
            System.err.println("Selection is -1");
        }
        int id = Integer.parseInt(jt.getValueAt(row, 0).toString());
        return c.get(id);
    }
    
    private class RowListener implements ListSelectionListener {
        @Override
        public void valueChanged(ListSelectionEvent event) {
            if (event.getValueIsAdjusting()) {
                return;
            }

            Claim c = getClaimAtSelectedRow(claimListAvailableToHandle, tableAvailableClaims);
            
            FormPanel fp = new FormPanel(user, c,false);
            panelCurrentClaimDetails.setLayout(new BorderLayout());
            panelCurrentClaimDetails.removeAll();
            panelCurrentClaimDetails.add(fp);
            panelCurrentClaimDetails.revalidate();
            validate();

            System.out.println("Row selected");
        }
    }
    class MyTableModel extends AbstractTableModel{

        String columnNames[] = {"Id", "Customer", "Description"};
        ClaimList claimList;

        public MyTableModel(ClaimList claimList) {
            super();
            this.claimList = claimList;
        }

        @Override
        public int getRowCount() {
            return claimList.getClaimList().keySet().size();
        }

        @Override
        public int getColumnCount() {
            return columnNames.length;
        }
        
        @Override
        public String getColumnName(int columnIndex) {
            return columnNames[columnIndex];
        }
        
        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Object[] idArray = claimList.getClaimList().keySet().toArray();
            Claim c = claimList.getClaimList().get(Integer.parseInt(idArray[rowIndex].toString()));
            Object result;
            switch (columnIndex) {
                case 0:
                    result = c.getId();
                    break;
                case 1:
                    result = c.getOwner().getName() + " " + c.getOwner().getSurname();
                    break;
                case 2:
                    result = c.getDescription();
                    break;
                default:
                    result = null;
            }
            return result;
        }
        
       

    }
}
